/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/bytedance/fedlearner/deploy/kubernetes_operator/pkg/apis/fedlearner.k8s.io/v1alpha1"
	scheme "github.com/bytedance/fedlearner/deploy/kubernetes_operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// FLAppsGetter has a method to return a FLAppInterface.
// A group's client should implement this interface.
type FLAppsGetter interface {
	FLApps(namespace string) FLAppInterface
}

// FLAppInterface has methods to work with FLApp resources.
type FLAppInterface interface {
	Create(*v1alpha1.FLApp) (*v1alpha1.FLApp, error)
	Update(*v1alpha1.FLApp) (*v1alpha1.FLApp, error)
	UpdateStatus(*v1alpha1.FLApp) (*v1alpha1.FLApp, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.FLApp, error)
	List(opts v1.ListOptions) (*v1alpha1.FLAppList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.FLApp, err error)
	FLAppExpansion
}

// fLApps implements FLAppInterface
type fLApps struct {
	client rest.Interface
	ns     string
}

// newFLApps returns a FLApps
func newFLApps(c *FedlearnerV1alpha1Client, namespace string) *fLApps {
	return &fLApps{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the fLApp, and returns the corresponding fLApp object, and an error if there is any.
func (c *fLApps) Get(name string, options v1.GetOptions) (result *v1alpha1.FLApp, err error) {
	result = &v1alpha1.FLApp{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("flapps").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of FLApps that match those selectors.
func (c *fLApps) List(opts v1.ListOptions) (result *v1alpha1.FLAppList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.FLAppList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("flapps").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested fLApps.
func (c *fLApps) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("flapps").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a fLApp and creates it.  Returns the server's representation of the fLApp, and an error, if there is any.
func (c *fLApps) Create(fLApp *v1alpha1.FLApp) (result *v1alpha1.FLApp, err error) {
	result = &v1alpha1.FLApp{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("flapps").
		Body(fLApp).
		Do().
		Into(result)
	return
}

// Update takes the representation of a fLApp and updates it. Returns the server's representation of the fLApp, and an error, if there is any.
func (c *fLApps) Update(fLApp *v1alpha1.FLApp) (result *v1alpha1.FLApp, err error) {
	result = &v1alpha1.FLApp{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("flapps").
		Name(fLApp.Name).
		Body(fLApp).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *fLApps) UpdateStatus(fLApp *v1alpha1.FLApp) (result *v1alpha1.FLApp, err error) {
	result = &v1alpha1.FLApp{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("flapps").
		Name(fLApp.Name).
		SubResource("status").
		Body(fLApp).
		Do().
		Into(result)
	return
}

// Delete takes name of the fLApp and deletes it. Returns an error if one occurs.
func (c *fLApps) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("flapps").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *fLApps) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("flapps").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched fLApp.
func (c *fLApps) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.FLApp, err error) {
	result = &v1alpha1.FLApp{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("flapps").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
