/* Copyright 2020 The FedLearner Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
import "fedlearner/common/common.proto";
import "google/protobuf/empty.proto";

package fedlearner.common;

message DataSourceStateResponse {
  FLRole role = 1;
  DataSourceState state = 2;
  DataSourceType data_source_type = 3;
  Status status = 4;
}

message RawDataIndex {
  int64 start_index = 1;
}

message RawDataRep {
  string raw_data_path = 1;
  oneof msg {
    google.protobuf.Empty unindexed = 2;
    RawDataIndex index = 3;
  }
}

enum RawDataState {
  UnAllocated = 0;
  Syncing = 1;
  Synced = 2;
  Joining = 3;
  Done = 4;
}

message RawDataManifest {
  int64 partition_id = 1;
  RawDataState state = 2;
  int64 allocated_rank_id = 3;
}

message SyncExampleIdRequest {
  int64 partition_id = 1;
}

message JoinExampleRequest {
  int64 partition_id = 1;
}

message RawDataRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  oneof msg {
    SyncExampleIdRequest sync_example_id = 3;
    JoinExampleRequest join_example = 4;
  }
}

message RawDataResponse {
  Status status = 1;
  oneof msg {
    RawDataManifest manifest = 2;
    google.protobuf.Empty finished = 3;
  }
}

message FinishRawDataRequest {
  DataSourceMeta data_source_meta = 1;
  int64 rank_id = 2;
  oneof msg {
    SyncExampleIdRequest sync_example_id = 3;
    JoinExampleRequest join_example = 4;
  }
}

message RawDataManifestRequest {
  DataSourceMeta data_source_meta = 1;
  int64 partition_id = 2;
}

message RawDataManifestResponse {
  Status status = 1;
  RawDataManifest manifest = 2;
}

service DataJoinMasterService {
  rpc GetDataSource(google.protobuf.Empty) returns (DataSource) {}
  rpc GetDataSourceState(DataSourceMeta) returns (DataSourceStateResponse) {}
  rpc AbortDataSource(DataSourceMeta) returns (Status) {}
  rpc RequestJoinPartition(RawDataRequest) returns (RawDataResponse) {}
  rpc FinishJoinPartition(FinishRawDataRequest) returns (Status) {}
  rpc QueryRawDataManifest(RawDataManifestRequest)
      returns (RawDataManifestResponse) {}
}

message DataBlockMeta {
  string block_id = 1;
  int64 partition_id = 2;
  uint32 file_version = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  repeated bytes example_ids = 6;
  int64 leader_start_index = 7;
  int64 leader_end_index = 8;
  int64 follower_restart_index = 9;
  int64 data_block_index = 10;
}

message CreateDataBlockRequest {
  DataSourceMeta data_source_meta = 1;
  DataBlockMeta data_block_meta = 2;
}

message LeaderStartPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 partition_id = 2;
}

message LeaderStartPartitionResponse {
  Status status = 1;
  int64 next_data_block_index = 2;
  bool finished = 3;
}

message LeaderFinishPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 partition_id = 2;
}

message LeaderFinishPartitionResponse {
  Status status = 1;
  bool finished = 2;
}

service DataJoinLeaderService {
  rpc CreateDataBlock(CreateDataBlockRequest) returns (Status) {}
  rpc StartPartition(LeaderStartPartitionRequest)
      returns (LeaderStartPartitionResponse) {}
  rpc FinishPartition(LeaderFinishPartitionRequest)
      returns (LeaderFinishPartitionResponse) {}
}

message SyncExamplesRequest {
  DataSourceMeta data_source_meta = 1;
  int64 partition_id = 2;
  int64 begin_index = 3;
  repeated bytes example_id = 4;
  repeated int64 event_time = 5;
}

message FollowerStartPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 partition_id = 2;
}

message FollowerStartPartitionResponse {
  Status status = 1;
  int64 next_index = 2;
  bool finished = 3;
}

message FollowerFinishPartitionRequest {
  DataSourceMeta data_source_meta = 1;
  int64 partition_id = 2;
}

message FollowerFinishPartitionResponse {
  Status status = 1;
  bool finished = 2;
}

service DataJoinFollowerService {
  rpc SyncExamples(SyncExamplesRequest) returns (Status) {}
  rpc StartPartition(FollowerStartPartitionRequest)
      returns (FollowerStartPartitionResponse) {}
  rpc FinishPartition(FollowerFinishPartitionRequest)
      returns (FollowerFinishPartitionResponse) {}
}

message SyncedExampleId {
  bytes example_id = 1;
  int64 event_time = 2;
  int64 index = 3;
}
